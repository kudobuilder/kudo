#!/bin/bash

kafka_dependency_list=("zookeeper")
flink_dependency_list=("kafka" "zookeeper")

# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "0.0.1"
    exit 0
fi

function frameworkInstall {
    if [[ "$1" == "" ]]
    then
        echo "Cannot install empty framework."
        exit 1
    else
        if [[ "$1" == "flink" ]]
        then
            echo "Installing $1 framework..."
            kubectl apply -f https://raw.githubusercontent.com/kudobuilder/kudo/bf665a30809fa5c18ecee6396203472e252fa15d/config/samples/flink.yaml
            if [[ "$?" == "1" ]]
            then
                echo "Failed to install framework flink."
                exit 1
            fi
            echo "Flink framework successfully installed."
            exit 0
        fi
        echo "Installing $1 framework..."
        kubectl apply -f https://raw.githubusercontent.com/kudobuilder/kudo/master/config/samples/$1-framework.yaml
        kubectl apply -f https://raw.githubusercontent.com/kudobuilder/kudo/master/config/samples/$1-frameworkversion.yaml
        if [[ "$?" == "1" ]]
        then
            echo "Failed to install framework $1"
            exit 1
        fi
    fi
}

function frameworkUninstall {
    if [[ "$1" == "" ]]
    then
        echo "Cannot uninstall empty framework."
        exit 1
    else
        if [[ "$1" == "flink" ]]
        then
            echo "Uninstalling $1 framework..."
            kubectl delete -f https://raw.githubusercontent.com/kudobuilder/kudo/bf665a30809fa5c18ecee6396203472e252fa15d/config/samples/flink.yaml
            if [[ "$?" == "1" ]]
            then
                echo "Failed to uninstall framework flink."
                exit 1
            fi
            echo "Flink framework successfully uninstalled."
            exit 0
        fi
        echo "Uninstalling $1 framework..."
        kubectl delete -f https://raw.githubusercontent.com/kudobuilder/kudo/master/config/samples/$1-framework.yaml
        kubectl delete -f https://raw.githubusercontent.com/kudobuilder/kudo/master/config/samples/$1-frameworkversion.yaml
        if [[ "$?" == "1" ]]
        then
            echo "Failed to uninstall framework $1"
            exit 1
        fi
    fi
}

function deleteDependencies {
    # checking dependencies
    echo "Checking for $1 dependencies..."
    # copying from the right array
    eval dependency_list=('$'{$1_dependency_list[@]})
    # adjusting the kubectl command for the case of a single dependency
    if [[ ${#dependency_list[@]} -lt "2" ]]
    then
        jsonpath=".metadata.name"
    else
        jsonpath=".items[*].metadata.name"
    fi
    FRAMEWORKS_INSTALLED=$(kubectl get framework ${dependency_list[@]} -o jsonpath="{$jsonpath}")
    if [ -z "$FRAMEWORKS_INSTALLED" ]
    then
        echo "Dependency frameworks are uninstalled."
        frameworkUninstall $1
    else
        echo -e "Found installed dependency framework(s):\n\t${FRAMEWORKS_INSTALLED[@]}"
        for i in "${dependency_list[@]}"
        do
        frameworkUninstall $i
        done
        echo "All dependency frameworks are uninstalled now."
        frameworkUninstall $1
    fi
}

function compareArray {
  awk 'BEGIN{RS=ORS=" "}
       {NR==FNR?a[$0]++:a[$0]--}
       END{for(k in a)if(a[k])print k}' <(echo -n "${!1}") <(echo -n "${!2}")
}

# install argument handling
if [[ "$1" == "install" ]]
then
    if ! [ -x "$(command -v jq)" ]; then
        echo 'Error: jq is not installed.' >&2
        exit 1
    fi
    if [[ "$2" == "flink" ]]
    then
        # checking to see if Flink framework is already installed
        FLINK_INSTALLED=$(kubectl get framework flink -o jsonpath="{.metadata.name}")
        if [ -z "$FLINK_INSTALLED" ]
        then
            echo "Flink framework has not been installed yet."
        else
            echo "Flink framework already installed."
            exit 1
            #todo: installFlinkInstance
        fi

        # checking dependencies
        echo "Checking for Flink dependencies..."

        FRAMEWORKS_INSTALLED=$(kubectl get framework ${flink_dependency_list[@]} -o jsonpath="{.items[*].metadata.name}")
        if [ -z "$FRAMEWORKS_INSTALLED" ]
        then
            echo "No dependency frameworks are installed."
            ## now loop through the dependencies to install
            for d in "${flink_dependency_list[@]}"
            do
            frameworkInstall $d
            done
            frameworkInstall flink
            exit 0
        else
            #TO_INSTALL_FRAMEWORKS=$(${FRAMEWORKS_INSTALLED[@]} ${flink_dependency_list[@]} | tr ' ' '\n' | sort | uniq -u)7
            #TO_INSTALL_FRAMEWORKS=${flink_dependency_list[@]} ${FRAMEWORKS_INSTALLED[@]} ${FRAMEWORKS_INSTALLED[@]} | tr ' ' '\n' | sort | uniq -u
            #echo $TO_INSTALL_FRAMEWORKS
            TO_INSTALL_FRAMEWORKS=($(compareArray flink_dependency_list[@] FRAMEWORKS_INSTALLED[@]))
            if [ -z "$TO_INSTALL_FRAMEWORKS" ]
            then
                echo "All dependency frameworks are installed."
                frameworkInstall flink
            else
                echo -e "Found missing framework(s):\n\t${TO_INSTALL_FRAMEWORKS[@]}"
                for d in "${TO_INSTALL_FRAMEWORKS[@]}"
                do
                frameworkInstall $d
                done
                echo "All dependency frameworks are installed now."
                frameworkInstall flink
            fi
        fi
    elif [[ "$2" == "kafka" ]]
    then
        # checking to see if Kafka framework is already installed
        KAFKA_INSTALLED=$(kubectl get framework kafka -o jsonpath="{.metadata.name}")
        if [ -z "$KAFKA_INSTALLED" ]
        then
            echo "Kafka framework has not been installed yet."
        else
            echo "Kafka framework already installed."
            exit 1
        fi

        # checking dependencies
        echo "Checking for Kafka dependencies..."

        FRAMEWORKS_INSTALLED=$(kubectl get framework ${kafka_dependency_list[@]} -o jsonpath="{.items[*].metadata.name}")
        if [ -z "$FRAMEWORKS_INSTALLED" ]
        then
            echo "No dependency frameworks are installed."
            ## now loop through the dependencies to install
            for d in "${kafka_dependency_list[@]}"
            do
            frameworkInstall $d
            done
            frameworkInstall kafka
            exit 0
        else
            TO_INSTALL_FRAMEWORKS=($(compareArray kafka_dependency_list[@] FRAMEWORKS_INSTALLED[@]))
            if [ -z "$TO_INSTALL_FRAMEWORKS" ]
            then
                echo "All dependency frameworks are installed."
                frameworkInstall kafka
            else
                echo -e "Found missing framework(s):\n\t${TO_INSTALL_FRAMEWORKS[@]}"
                for d in "${TO_INSTALL_FRAMEWORKS[@]}"
                do
                frameworkInstall $d
                done
                echo "All dependency frameworks are installed now."
                frameworkInstall kafka
            fi
        fi
    elif [[ "$2" == "zookeeper" ]]
    then
        # checking to see if Zookeeper framework is already installed
        ZOOKEEPER_INSTALLED=$(kubectl get framework zookeeper -o jsonpath="{.metadata.name}")
        if [ -z "$ZOOKEEPER_INSTALLED" ]
        then
            echo "Zookeeper framework has not been installed yet."
            frameworkInstall zookeeper
            exit 0
        else
            echo "Zookeeper framework already installed."
            exit 1
        fi
    else
        echo -e "$2 is not a known framework.\n"
        echo "Please select the framework to install:"
        sampleRegistry=$(curl -s https://api.github.com/repos/kudobuilder/kudo/contents/config/samples | jq -r ".[] | .name ")
        echo ""
        for t in ${sampleRegistry[@]}; do
            if [[ $t == *"framework.yaml" ]]; then
                #echo -e "\t$t"
                echo -e "\t${t%-framework.yaml*}"
            fi
        done

        # hack to always show flink until we refactored config/samples
        echo -e "\tflink"
        echo ""
        echo "Syntax:"
        echo -e "\tkubectl kudo install <frameworkName>"
        echo ""
        echo "Example:"
        echo -e "\tkubectl kudo install flink"
        exit 1
    fi
fi

# uninstall argument handling
if [[ "$1" == "uninstall" ]]
then
    if ! [ -x "$(command -v jq)" ]; then
        echo 'Error: jq is not installed.' >&2
        exit 1
    fi
    if [[ "$2" == "flink" ]]
    then
        # checking to see if Flink framework is already uninstalled
        FLINK_INSTALLED=$(kubectl get framework flink -o jsonpath="{.metadata.name}")
        if [ -z "$FLINK_INSTALLED" ]
        then
            echo "Flink framework is already uninstalled."
            exit 1

        else
            echo "Flink framework is installed."
        fi

        while [ ! $# -eq 0 ]
        do
            case "$1" in
                --all-dependencies | -a)
                    deleteDependencies flink
                    exit 0
                    ;;
            esac
            shift
        done
        echo "Uninstalling Flink..."
        frameworkUninstall flink
        exit 0
    elif [[ "$2" == "kafka" ]]
    then
        # checking to see if Kafka framework is already uninstalled
        KAFKA_INSTALLED=$(kubectl get framework kafka -o jsonpath="{.metadata.name}")
        if [ -z "$KAFKA_INSTALLED" ]
        then
            echo "Kafka framework is already uninstalled."
            exit 1

        else
            echo "Kafka framework is installed."
        fi

        while [ ! $# -eq 0 ]
        do
            case "$1" in
                --all-dependencies | -a)
                    deleteDependencies kafka
                    exit 0
                    ;;
            esac
            shift
        done
        echo "Uninstalling Kafka..."
        frameworkUninstall kafka
        exit 0
    elif [[ "$2" == "zookeeper" ]]
    then
        # checking to see if Kafka framework is already uninstalled
        ZOOKEEPER_INSTALLED=$(kubectl get framework zookeeper -o jsonpath="{.metadata.name}")
        if [ -z "$ZOOKEEPER_INSTALLED" ]
        then
            echo "Zookeeper framework is already uninstalled."
            exit 1

        else
            echo "Zookeeper framework is installed."
            frameworkUninstall zookeeper
            exit 0
        fi
    else
        echo -e "$2 is not a known framework.\n"
        echo "Please choose from the list of frameworks to uninstall:"
        FRAMEWORKS_INSTALLED=$(kubectl get frameworks -o jsonpath="{.items[*].metadata.name}")
        echo ""
        for t in ${FRAMEWORKS_INSTALLED[@]}; do
            echo -e "\t$t"
        done
        echo ""
        echo "Syntax:"
        echo -e "\tkubectl kudo uninstall <frameworkName>"
        echo ""
        echo "Example:"
        echo -e "\tkubectl kudo uninstall kafka"
        exit 1
    fi
fi

# shell argument handling
if [[ "$1" == "shell" ]]
then
    if [[ "$2" == "flink" ]]
    then
        # --generator=run-pod/v1 -it --rm --image=superorbital/bash --restart=Never -- curl http://demo-flink-jobmanager:8081/jars
        # kubectl run -i --tty --rm bash --image=bash --restart=Never -- bash -c "curl http://demo-flink-jobmanager:8081/jars"
        #kubectl run shell ${@:2}
        # Get current running jobmanager
        JOBMANAGER_POD=$(kubectl get pods -l heritage=kudo,component=jobmanager --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}")
        if [ -z "$JOBMANAGER_POD" ]
        then
            echo "No running jobmanager found."
            exit 1
        else
            kubectl exec -i --tty $JOBMANAGER_POD -- /bin/bash
            exit 0
        fi
    fi
    echo "Please verify the framework to get a shell:"
    kubectl get frameworks
    echo ""
    echo "Syntax: kubectl kudo shell <frameworkName>"
    echo ""
    echo "Example: kubectl kudo shell flink"
    exit 1
fi

# exec argument handling
if [[ "$1" == "exec" ]]
then
    if [[ "$2" == "flink" ]]
    then
        # Get current running jobmanager
        JOBMANAGER_POD=$(kubectl get pods -l heritage=kudo,component=jobmanager --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}")
        if [ -z "$JOBMANAGER_POD" ]
        then
            echo "No running jobmanager found."
            exit 1
        else
            kubectl exec -it $JOBMANAGER_POD -- ${@:3}
            exit 0
        fi
    fi
    echo "Please verify the framework to exec command:"
    kubectl get frameworks
    echo ""
    echo "Syntax: kubectl kudo exec <frameworkName>"
    echo ""
    echo "Example: kubectl kudo exec flink"
    exit 1
fi

# exec argument handling
if [[ "$1" == "flink" ]]
then
    # Get current running jobmanager
    JOBMANAGER_POD=$(kubectl get pods -l heritage=kudo,component=jobmanager --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}")
    if [ -z "$JOBMANAGER_POD" ]
    then
        echo "No running jobmanager found."
        exit 1
    else
        kubectl exec -it $JOBMANAGER_POD -- bin/flink ${@:2}
        exit 0
    fi
fi

function createFunction {
    framework=$2
    shift 2
    while getopts ":n:v:p:" opt ; do
        case "$opt" in
                p)   
                c+=("$OPTARG")
                ;;
                n)
                echo "name is: $OPTARG"
                name=$OPTARG
                ;;
                v)
                echo "version is: $OPTARG"
                frameworkversion=$OPTARG
                ;;                
                \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
                :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))
    rm /tmp/kudo_instance_parameter
    replace=": "
    for t in ${c[@]}; do
        param_clean=${t/:/$replace}
        cat <<EOF >> "/tmp/kudo_instance_parameter"
        $param_clean
EOF
    done
    cat <<EOF > "/tmp/kudo_instance"
apiVersion: kudo.k8s.io/v1alpha1
kind: Instance
metadata:
    labels:
        controller-tools.k8s.io: "1.0"
        framework: $framework
    name: $name
spec:
    frameworkVersion:
        name: $framework-$frameworkversion
        namespace: default
        type: FrameworkVersion
    parameters:
EOF
    cat /tmp/kudo_instance /tmp/kudo_instance_parameter > /tmp/kudo_instance_joined
    kubectl apply -f /tmp/kudo_instance_joined
}

# create argument handling
if [[ "$1" == "create" ]]
then
    createFunction "$@"
    if [[ "$?" == "1" ]]
    then
        echo ""
        echo "Failed to create instance for framework $2."
        echo ""
        echo "Invalid create command."
        echo ""
        echo "Syntax: kubectl kudo create -n <instanceName> -v <versionNumber> -p PARAM1=VALUE -p PARAM2=Value"
        echo ""
        echo "Example: kubectl kudo create kafka -n kafka -v 2.11-2.4.0 -p KAFKA_ZOOKEEPER_URI:zk-zk-0.zk-hs:2181,zk-zk-1.zk-hs:2181,zk-zk-2.zk-hs:2181 -p KAFKA_ZOOKEEPER_PATH:/small -p BROKERS_COUNT:3"
        exit 1
    fi
    exit 0
fi

# delete argument handling
if [[ "$1" == "delete" ]]
then
    kubectl delete instance $2
    if [[ "$?" == "1" ]]
    then
        echo ""
        echo "Failed to delete instance $2."
        echo ""
        echo "Syntax: kubectl kudo delete <instanceName> -v <versionNumber> -p PARAM1=VALUE -p PARAM2=Value"
        echo ""
        echo "Example: kubectl kudo delete kafka"
        exit 1
    fi
    exit 0
fi

echo "Kubectl kudo Plugin v0.0.1"
echo ""
echo "# Available commands"
echo "kubectl kudo shell <Frameworkname>"
echo "kubectl kudo exec <Frameworkname>"
echo "kubectl kudo flink <CLI Command>"