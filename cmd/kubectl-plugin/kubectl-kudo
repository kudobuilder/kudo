#!/bin/bash

flink_dependency_list=("")
kafka_dependency_list=("zookeeper")
zookeeper_dependency_list=("")


# optional argument handling
if [[ "$1" == "version" ]]
then
    echo "0.0.1"
    exit 0
fi

function frameworkInstall {
    if [[ "$1" == "" ]]
    then
        echo "Cannot install empty framework."
        exit 1
    else
        echo "Installing $1 framework..."
        kubectl apply -f https://raw.githubusercontent.com/kudobuilder/frameworks/master/repo/$2/$1/versions/$3/$1-framework.yaml
        kubectl apply -f https://raw.githubusercontent.com/kudobuilder/frameworks/master/repo/$2/$1/versions/$3/$1-frameworkversion.yaml
        if [[ "$?" == "1" ]]
        then
            echo "Failed to install framework $1"
            exit 1
        fi
        echo "$2 framework $1 successfully installed."
    fi
}

function frameworkUninstall {
    if [[ "$1" == "" ]]
    then
        echo "Cannot uninstall empty framework."
        exit 1
    else
        echo "Uninstalling $1 framework..."
        kubectl delete -f https://raw.githubusercontent.com/kudobuilder/frameworks/master/repo/$2/$1/versions/$3/$1-framework.yaml
        if [[ "$?" == "1" ]]
        then
            echo "Failed to uninstall framework $1"
            exit 1
        fi
        kubectl delete -f https://raw.githubusercontent.com/kudobuilder/frameworks/master/repo/$2/$1/versions/$3/$1-frameworkversion.yaml
        if [[ "$?" == "1" ]]
        then
            echo "Failed to uninstall frameworkversion $1"
            exit 1
        fi
        echo "$2 framework $1 successfully uninstalled."
    fi
}

function deleteDependencies {
    # checking dependencies
    echo "Checking for $1 dependencies..."
    # copying from the right array
    eval dependency_list=('$'{$1_dependency_list[@]})
    # adjusting the kubectl command for the case of a single dependency
    if [[ ${#dependency_list[@]} -lt "2" ]]
    then
        jsonpath=".metadata.name"
    else
        jsonpath=".items[*].metadata.name"
    fi
    FRAMEWORKS_INSTALLED=$(kubectl get framework ${dependency_list[@]} -o jsonpath="{$jsonpath}")
    if [ -z "$FRAMEWORKS_INSTALLED" ]
    then
        echo "Dependency frameworks are uninstalled."
        frameworkLookup uninstall $1
    else
        echo -e "Found installed dependency framework(s):\n\t${FRAMEWORKS_INSTALLED[@]}"
        for i in "${dependency_list[@]}"
        do
        frameworkLookup uninstall $i
        done
        echo "All dependency frameworks are uninstalled now."
        frameworkLookup uninstall $1
    fi
}

function compareArray {
    awk 'BEGIN{RS=ORS=" "}
         {NR==FNR?a[$0]++:a[$0]--}
         END{for(k in a)if(a[k])print k}' <(echo -n "${!1}") <(echo -n "${!2}")
}

function frameworkLookup {
    githubCredentials=$(cat ~/.git-credentials | cut -d'@' -f 1 | sed 's/https:\/\///')
    if [[ "$1" == "install" ]]
    then
        # Install part
        echo "Looking up stable version of $2"
        version="stable"
        frameworkVersions=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/stable/$2/versions | jq -r ".[] | .name ")
        if [[ $frameworkVersions == "" ]]
        then
            echo "Stable version of $2 not found. Looking up incubating versions..."
            frameworkVersions=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/incubating/$2/versions | jq -r ".[] | .name ")
            if [[ $frameworkVersions == "" ]]
            then
                echo -e "\tFramework $2 not found in registry."
                exit 1
            fi
            version="incubating"
        fi
        if [[ ${#frameworkVersions[@]} -lt 2 ]]
        then
            echo -e "\tFound ${#frameworkVersions[@]} $version version"
            latestVersion=$(printf "%s\n" ${frameworkVersions[@]} | sort -r )
            echo "Found latest $version version $latestVersion"
        else
            echo -e "\tFound ${#frameworkVersions[@]} $version versions"
            echo "Select latest $version version..."
            reverseSortedVersions=$(printf "%s\n" ${frameworkVersions[@]} | sort -r )
            latestVersion=(${reverseSortedVersions[0]})
            echo -e "\tFound latest $version version $latestVersion"
        fi
        frameworkInstall $2 $version $latestVersion
    elif [[ "$1" == "lookup" ]]
    then
        frameworkVersions=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/stable/$2/versions | jq -r ".[] | .name ")
        if [[ $frameworkVersions == "" ]]
        then
            echo "Stable version of $2 not found. Looking up incubating versions..."
            frameworkVersions=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/incubating/$2/versions | jq -r ".[] | .name ")
            if [[ $frameworkVersions == "" ]]
            then
                echo -e "\tFramework $2 not found in registry."
                echo ""
                echo "Available stable frameworks to install:"
                availableStable=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/stable | jq -r ".[] | .name ")
                for f in ${availableStable[@]}; do
                    echo -e "\t$f"
                done
                echo "Available incubating frameworks to install:"
                availableIncubating=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/incubating | jq -r ".[] | .name ")
                for f in ${availableIncubating[@]}; do
                    echo -e "\t$f"
                done
                exit 1
            fi
        fi
        echo "Framework $2 found in registry."
    else
        # Uninstall part
        echo "Looking up stable version of $2"
        version="stable"
        frameworkVersions=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/stable/$2/versions | jq -r ".[] | .name ")
        if [[ $frameworkVersions == "" ]]
        then
            echo "Stable version of $2 not found. Looking up incubating versions..."
            frameworkVersions=$(curl -s --user $githubCredentials https://api.github.com/repos/kudobuilder/frameworks/contents/repo/incubating/$2/versions | jq -r ".[] | .name ")
            if [[ $frameworkVersions == "" ]]
            then
                echo -e "\tFramework $2 not found in registry."
                exit 1
            fi
            version="incubating"
        fi
        if [[ ${#frameworkVersions[@]} -lt 2 ]]
        then
            echo -e "\tFound ${#frameworkVersions[@]} $version version"
            latestVersion=$(printf "%s\n" ${frameworkVersions[@]} | sort -r )
            echo "Found latest $version version $latestVersion"
        else
            echo -e "\tFound ${#frameworkVersions[@]} $version versions"
            echo "Select latest $version version..."
            reverseSortedVersions=$(printf "%s\n" ${frameworkVersions[@]} | sort -r )
            latestVersion=(${reverseSortedVersions[0]})
            echo -e "\tFound latest $version version $latestVersion"
        fi
        frameworkUninstall $2 $version $latestVersion

    fi    
}

# install argument handling
if [[ "$1" == "install" ]]
then
    if ! [ -x "$(command -v jq)" ]; then
        echo 'Error: jq is not installed.' >&2
        exit 1
    fi
    if [[ "$2" == "" ]]
    then
        echo "Cannot install empty framework."
        exit 1
    fi
    frameworkLookup lookup $2
    # checking dependencies
    echo "Checking for $2 dependencies..."
    eval dependency_list=('$'{$2_dependency_list[@]})
    if [[ ${#dependency_list[@]} -lt "2" ]]
    then
        jsonpath=".metadata.name"
    else
        jsonpath=".items[*].metadata.name"
    fi
    FRAMEWORKS_INSTALLED=$(kubectl get framework ${dependency_list[@]} -o jsonpath="{$jsonpath}")
    if [ -z "$FRAMEWORKS_INSTALLED" ]
    then
        echo "No dependency frameworks are installed."
        ## now loop through the dependencies to install
        for d in "${dependency_list[@]}"
        do
        frameworkLookup install $d
        done
        frameworkLookup install $2
        exit 0
    else
        TO_INSTALL_FRAMEWORKS=($(compareArray dependency_list[@] FRAMEWORKS_INSTALLED[@]))
        if [ -z "$TO_INSTALL_FRAMEWORKS" ]
        then
            echo "All dependency frameworks are installed."
            frameworkLookup install $2
        else
            echo -e "Found missing framework(s):\n\t${TO_INSTALL_FRAMEWORKS[@]}"
            for d in "${TO_INSTALL_FRAMEWORKS[@]}"
            do
            frameworkLookup install $d
            done
            echo "All dependency frameworks are installed now."
            frameworkLookup install $2
        fi
    fi
    exit 0
fi

# uninstall argument handling
if [[ "$1" == "uninstall" ]]
then
    if ! [ -x "$(command -v jq)" ]; then
        echo 'Error: jq is not installed.' >&2
        exit 1
    fi
    # checking to see if framework is already uninstalled
    FRAMEWORK_INSTALLED=$(kubectl get framework $2 -o jsonpath="{.metadata.name}")
    if [ -z "$FRAMEWORK_INSTALLED" ]
    then
        echo -e "$2 is not an installed framework.\n"
        echo ""
        echo "Please choose from the list of available frameworks to uninstall:"
        FRAMEWORKS_INSTALLED=$(kubectl get frameworks)
        echo "$FRAMEWORKS_INSTALLED"
        echo ""
        echo "Syntax:"
        echo -e "\tkubectl kudo uninstall <frameworkName>"
        echo ""
        echo "Example:"
        echo -e "\tkubectl kudo uninstall kafka"
        exit 1
    else
        echo "$2 framework is installed."
    fi
    framework=$2
    while [ ! $# -eq 0 ]
    do
        case "$1" in
            --all-dependencies | -a)
                deleteDependencies $framework
                exit 0
                ;;
        esac
        shift
    done
    echo "Uninstalling $framework..."
    frameworkLookup uninstall $framework
    exit 0
fi

# shell argument handling
if [[ "$1" == "shell" ]]
then
    if [[ "$2" == "flink" ]]
    then
        JOBMANAGER_POD=$(kubectl get pods -l heritage=kudo,component=demo-flink-jobmanager --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}")
        if [ -z "$JOBMANAGER_POD" ]
        then
            echo "No running jobmanager found."
            exit 1
        else
            kubectl exec -i --tty $JOBMANAGER_POD -- /bin/bash
            exit 0
        fi
    fi
    echo "Please verify the framework to get a shell:"
    kubectl get frameworks
    echo ""
    echo "Syntax: kubectl kudo shell <frameworkName>"
    echo ""
    echo "Example: kubectl kudo shell flink"
    exit 1
fi

# exec argument handling
if [[ "$1" == "exec" ]]
then
    if [[ "$2" == "flink" ]]
    then
        # Get current running jobmanager
        JOBMANAGER_POD=$(kubectl get pods -l heritage=kudo,component=demo-flink-jobmanager --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}")
        if [ -z "$JOBMANAGER_POD" ]
        then
            echo "No running jobmanager found."
            exit 1
        else
            kubectl exec -it $JOBMANAGER_POD -- ${@:3}
            exit 0
        fi
    fi
    echo "Please verify the framework to exec command:"
    kubectl get frameworks
    echo ""
    echo "Syntax: kubectl kudo exec <frameworkName>"
    echo ""
    echo "Example: kubectl kudo exec flink"
    exit 1
fi

# exec argument handling
if [[ "$1" == "flink" ]]
then
    # Get current running jobmanager
    JOBMANAGER_POD=$(kubectl get pods -l heritage=kudo,component=demo-flink-jobmanager --field-selector=status.phase==Running -o jsonpath="{.items[0].metadata.name}")
    if [ -z "$JOBMANAGER_POD" ]
    then
        echo "No running jobmanager found."
        exit 1
    else
        kubectl exec -it $JOBMANAGER_POD -- bin/flink ${@:2} -m localhost:8081
        exit 0
    fi
fi

function createInstance {
    framework=$2
    shift 2
    while getopts ":n:v:p:" opt ; do
        case "$opt" in
                p)   
                c+=("$OPTARG")
                ;;
                n)
                name=$OPTARG
                ;;
                v)
                frameworkversion=$OPTARG
                ;;                
                \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
                :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))
    rm /tmp/kudo_instance_parameter
    replace=": "
    c+=("KUBECTL_PLUGIN:\"true\"")
    for t in ${c[@]}; do
        param_clean=${t/:/$replace}
        cat <<EOF >> "/tmp/kudo_instance_parameter"
        $param_clean
EOF
    done
    cat <<EOF > "/tmp/kudo_instance"
apiVersion: kudo.k8s.io/v1alpha1
kind: Instance
metadata:
    labels:
        controller-tools.k8s.io: "1.0"
        framework: $framework
    name: $name
spec:
    frameworkVersion:
        name: $framework-$frameworkversion
        namespace: default
        type: FrameworkVersion
    parameters:
EOF
    cat /tmp/kudo_instance /tmp/kudo_instance_parameter > /tmp/kudo_instance_joined
    kubectl apply -f /tmp/kudo_instance_joined
}

# create argument handling
if [[ "$1" == "create" ]]
then
    createInstance "$@"
    if [[ "$?" == "1" ]]
    then
        echo ""
        echo "Failed to create instance for framework $2."
        echo ""
        echo "Invalid create command."
        echo ""
        echo "Syntax: kubectl kudo create <framework> -n <instanceName> -v <versionNumber> -p PARAM1=VALUE -p PARAM2=Value"
        echo ""
        echo "Example: kubectl kudo create kafka -n kafka -v 2.11-2.4.0 -p KAFKA_ZOOKEEPER_URI:zk-zk-0.zk-hs:2181,zk-zk-1.zk-hs:2181,zk-zk-2.zk-hs:2181 -p KAFKA_ZOOKEEPER_PATH:\"/small\" -p BROKERS_COUNT:\"3\""
        exit 1
    fi
    exit 0
fi

# delete argument handling
if [[ "$1" == "delete" ]]
then
    kubectl delete instance $2
    if [[ "$?" == "1" ]]
    then
        echo ""
        echo "Failed to delete instance $2."
        echo ""
        echo "Syntax: kubectl kudo delete <instanceName>"
        echo ""
        echo "Example: kubectl kudo delete kafka"
        exit 1
    fi
    exit 0
fi

# scale argument handling
if [[ "$1" == "scale" ]]
then
    kubectl scale deployment ${@:2}
    if [[ "$?" == "1" ]]
    then
        kubectl scale statefulset ${@:2}
        if [[ "$?" == "1" ]]
        then
        echo ""
        echo "Failed to scale instance $2."
        echo ""
        echo "Syntax: kubectl kudo scale <instanceName> --replicas=<number>"
        echo ""
        echo "Example: kubectl kudo scale kafka --replicas=1"
        exit 1
        fi
    fi
    exit 0
fi

function startPlan {
    shift 1
    while getopts ":n:v:p:" opt ; do
        case "$opt" in
                p)   
                planName=$OPTARG
                ;;
                n)
                name=$OPTARG
                ;;
                v)
                frameworkversion=$OPTARG
                ;;                
                \?)
                echo "Invalid option: -$OPTARG" >&2
                exit 1
                ;;
                :)
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
                ;;
        esac
    done
    shift $((OPTIND-1))
    cat <<EOF | kubectl apply -f -
apiVersion: kudo.k8s.io/v1alpha1
kind: PlanExecution
metadata:
    labels:
        framework-version: $frameworkversion
        instance: $name
    name: $name-$planName
spec:
    instance:
        kind: Instance
        name: $name
        namespace: default
    planName: $planName
EOF
}

# create argument handling
if [[ "$1" == "start" ]]
then
    startPlan "$@"
    if [[ "$?" == "1" ]]
    then
        echo ""
        echo "Failed to create instance for framework $framework."
        echo ""
        echo "Invalid create command."
        echo ""
        echo "Syntax: kubectl kudo start -n <instanceName> -v <version> -p <planName>"
        echo ""
        echo "Example: kubectl kudo start -n demo -v flink-financial-demo -p upload"
        exit 1
    fi
    exit 0
fi


echo "Kubectl Kudo Plugin v0.0.1"
echo ""
echo "# Available commands"
echo "kubectl kudo create -n <instanceName> -v <versionNumber> -p PARAM1=\"VALUE\" -p PARAM2=Value"
echo "kubectl kudo delete <instanceName>"
echo "kubectl kudo exec <Frameworkname>"
echo "kubectl kudo flink <CLI Command>"
echo "kubectl kudo scale <instanceName> --replicas=<number>"
echo "kubectl kudo shell <Frameworkname>"