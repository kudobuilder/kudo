/*

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kudobuilder/kudo/pkg/apis/kudo/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OperatorVersionLister helps list OperatorVersions.
type OperatorVersionLister interface {
	// List lists all OperatorVersions in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OperatorVersion, err error)
	// OperatorVersions returns an object that can list and get OperatorVersions.
	OperatorVersions(namespace string) OperatorVersionNamespaceLister
	OperatorVersionListerExpansion
}

// operatorVersionLister implements the OperatorVersionLister interface.
type operatorVersionLister struct {
	indexer cache.Indexer
}

// NewOperatorVersionLister returns a new OperatorVersionLister.
func NewOperatorVersionLister(indexer cache.Indexer) OperatorVersionLister {
	return &operatorVersionLister{indexer: indexer}
}

// List lists all OperatorVersions in the indexer.
func (s *operatorVersionLister) List(selector labels.Selector) (ret []*v1alpha1.OperatorVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OperatorVersion))
	})
	return ret, err
}

// OperatorVersions returns an object that can list and get OperatorVersions.
func (s *operatorVersionLister) OperatorVersions(namespace string) OperatorVersionNamespaceLister {
	return operatorVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OperatorVersionNamespaceLister helps list and get OperatorVersions.
type OperatorVersionNamespaceLister interface {
	// List lists all OperatorVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OperatorVersion, err error)
	// Get retrieves the OperatorVersion from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OperatorVersion, error)
	OperatorVersionNamespaceListerExpansion
}

// operatorVersionNamespaceLister implements the OperatorVersionNamespaceLister
// interface.
type operatorVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OperatorVersions in the indexer for a given namespace.
func (s operatorVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OperatorVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OperatorVersion))
	})
	return ret, err
}

// Get retrieves the OperatorVersion from the indexer for a given namespace and name.
func (s operatorVersionNamespaceLister) Get(name string) (*v1alpha1.OperatorVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("operatorversion"), name)
	}
	return obj.(*v1alpha1.OperatorVersion), nil
}
